{"code":"import { __awaiter, __generator } from \"tslib\";\r\nimport { createFile } from \"mp4box\";\r\n// import \"dom-webcodecs\"\r\nvar MP4Source = /** @class */ (function () {\r\n    function MP4Source(uri) {\r\n        var _this = this;\r\n        this.file = createFile();\r\n        this.file.onError = console.error.bind(console);\r\n        this.file.onReady = this.onReady.bind(this);\r\n        this.file.onSamples = this.onSamples.bind(this);\r\n        fetch(uri).then(function (response) {\r\n            var _a;\r\n            var reader = (_a = response.body) === null || _a === void 0 ? void 0 : _a.getReader();\r\n            var offset = 0;\r\n            var mp4File = _this.file;\r\n            //这里的value直接给了any类型，后面根据需要调整\r\n            function appendBuffers(_a) {\r\n                var done = _a.done, value = _a.value;\r\n                if (done) {\r\n                    mp4File.flush();\r\n                    return;\r\n                }\r\n                var buf = value.buffer;\r\n                buf.fileStart = offset;\r\n                offset += buf.byteLength;\r\n                mp4File.appendBuffer(buf);\r\n                return reader === null || reader === void 0 ? void 0 : reader.read().then(appendBuffers);\r\n            }\r\n            return reader === null || reader === void 0 ? void 0 : reader.read().then(appendBuffers);\r\n        });\r\n        this.info = null;\r\n        this._info_resolver = null;\r\n    }\r\n    MP4Source.prototype.onReady = function (info) {\r\n        // TODO: Generate configuration changes.\r\n        this.info = info;\r\n        if (this._info_resolver) {\r\n            this._info_resolver(info);\r\n            this._info_resolver = null;\r\n        }\r\n    };\r\n    MP4Source.prototype.getInfo = function () {\r\n        var _this = this;\r\n        if (this.info)\r\n            return Promise.resolve(this.info);\r\n        return new Promise(function (resolver) { _this._info_resolver = resolver; });\r\n    };\r\n    MP4Source.prototype.getAvccBox = function () {\r\n        // TODO: make sure this is coming from the right track.\r\n        //如果是除了hevc，h264以外的视频，无法处理\r\n        return this.file.moov.traks[0].mdia.minf.stbl.stsd.entries[0].avcC;\r\n    };\r\n    MP4Source.prototype.getHvccBox = function () {\r\n        return this.file.moov.traks[0].mdia.minf.stbl.stsd.entries[0].hvcC;\r\n    };\r\n    //onChunk这里给了any类型\r\n    MP4Source.prototype.start = function (track, onChunk) {\r\n        this._onChunk = onChunk;\r\n        this.file.setExtractionOptions(track.id);\r\n        this.file.start();\r\n    };\r\n    MP4Source.prototype.onSamples = function (track_id, ref, samples) {\r\n        for (var _i = 0, samples_1 = samples; _i < samples_1.length; _i++) {\r\n            var sample = samples_1[_i];\r\n            var type = sample.is_sync ? \"key\" : \"delta\";\r\n            var chunk = new EncodedVideoChunk({\r\n                type: type,\r\n                timestamp: sample.cts,\r\n                duration: sample.duration,\r\n                data: sample.data\r\n            });\r\n            this._onChunk(chunk);\r\n        }\r\n    };\r\n    return MP4Source;\r\n}());\r\nexport { MP4Source };\r\nvar MP4Demuxer = /** @class */ (function () {\r\n    function MP4Demuxer(uri) {\r\n        this.source = new MP4Source(uri);\r\n    }\r\n    //这里的box没有合适的index.d.ts，直接给了any类型\r\n    MP4Demuxer.prototype.getAvccExtradata = function (avccBox) {\r\n        var i;\r\n        var size = 7;\r\n        for (i = 0; i < avccBox.SPS.length; i++) {\r\n            // nalu length is encoded as a uint16.\r\n            size += 2 + avccBox.SPS[i].length;\r\n        }\r\n        for (i = 0; i < avccBox.PPS.length; i++) {\r\n            // nalu length is encoded as a uint16.\r\n            size += 2 + avccBox.PPS[i].length;\r\n        }\r\n        var writer = new Writer(size);\r\n        writer.writeUint8(avccBox.configurationVersion);\r\n        writer.writeUint8(avccBox.AVCProfileIndication);\r\n        writer.writeUint8(avccBox.profile_compatibility);\r\n        writer.writeUint8(avccBox.AVCLevelIndication);\r\n        writer.writeUint8(avccBox.lengthSizeMinusOne + (63 << 2));\r\n        writer.writeUint8(avccBox.nb_SPS_nalus + (7 << 5));\r\n        for (i = 0; i < avccBox.SPS.length; i++) {\r\n            writer.writeUint16(avccBox.SPS[i].length);\r\n            writer.writeUint8Array(avccBox.SPS[i].nalu);\r\n        }\r\n        writer.writeUint8(avccBox.nb_PPS_nalus);\r\n        for (i = 0; i < avccBox.PPS.length; i++) {\r\n            writer.writeUint16(avccBox.PPS[i].length);\r\n            writer.writeUint8Array(avccBox.PPS[i].nalu);\r\n        }\r\n        return writer.getData();\r\n    };\r\n    MP4Demuxer.prototype.getHvccExtradata = function (hvccBox) {\r\n        var i, j;\r\n        var size = 23;\r\n        for (i = 0; i < hvccBox.nalu_arrays.length; i++) {\r\n            // nalu length is encoded as a uint16.\r\n            size += 3;\r\n            for (j = 0; j < hvccBox.nalu_arrays[i].length; j++) {\r\n                // console.log(hvccBox.nalu_arrays[i][\"0\"].data.length)\r\n                size += (2 + hvccBox.nalu_arrays[i][j].data.length);\r\n            }\r\n        }\r\n        console.log(size);\r\n        var writer = new Writer(size);\r\n        writer.writeUint8(hvccBox.configurationVersion);\r\n        console.log(((hvccBox.general_profile_space) << 6) + ((hvccBox.general_tier_flag) << 5) + (hvccBox.general_profile_idc));\r\n        writer.writeUint8(((hvccBox.general_profile_space) << 6) + ((hvccBox.general_tier_flag) << 5) + (hvccBox.general_profile_idc));\r\n        writer.writeUint32(hvccBox.general_profile_compatibility);\r\n        writer.writeUint8Array(hvccBox.general_constraint_indicator);\r\n        writer.writeUint8(hvccBox.general_level_idc);\r\n        //?别人写的是24\r\n        writer.writeUint16((15 << 12) + (hvccBox.min_spatial_segmentation_idc)); //???\r\n        console.log((63 << 2) + (hvccBox.parallelismType));\r\n        writer.writeUint8((63 << 2) + (hvccBox.parallelismType));\r\n        writer.writeUint8((63 << 2) + (hvccBox.chroma_format_idc));\r\n        writer.writeUint8((31 << 3) + (hvccBox.bit_depth_luma_minus8));\r\n        writer.writeUint8((31 << 3) + (hvccBox.bit_depth_chroma_minus8));\r\n        writer.writeUint16(hvccBox.avgFrameRate);\r\n        writer.writeUint8(((hvccBox.constantFrameRate) << 6) + (((hvccBox.numTemporalLayers)) << 3) + ((hvccBox.temporalIdNested) << 2) + (hvccBox.lengthSizeMinusOne));\r\n        writer.writeUint8(hvccBox.nalu_arrays.length);\r\n        for (i = 0; i < hvccBox.nalu_arrays.length; i++) {\r\n            var current = hvccBox.nalu_arrays[i];\r\n            console.log(((current.completeness) << 7) + (current.nalu_type));\r\n            writer.writeUint8(((current.completeness) << 7) + (current.nalu_type));\r\n            writer.writeUint16(current.length);\r\n            for (j = 0; j < current.length; j++) {\r\n                console.log(111111);\r\n                console.log((current[j].data.length));\r\n                writer.writeUint16(current[j].data.length);\r\n                writer.writeUint8Array(current[j].data);\r\n                console.log(22222);\r\n            }\r\n        }\r\n        return writer.getData();\r\n    };\r\n    MP4Demuxer.prototype.getConfig = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var info, extradata, extradata, config;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.source.getInfo()];\r\n                    case 1:\r\n                        info = _a.sent();\r\n                        this.track = info.videoTracks[0];\r\n                        if (this.track.codec.includes('hvc1'))\r\n                            extradata = this.getHvccExtradata(this.source.getHvccBox());\r\n                        else\r\n                            extradata = this.getAvccExtradata(this.source.getAvccBox());\r\n                        config = {\r\n                            codec: this.track.codec,\r\n                            codedHeight: this.track.video.height,\r\n                            codedWidth: this.track.video.width,\r\n                            description: extradata\r\n                        };\r\n                        return [2 /*return*/, Promise.resolve(config)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    //这里给了any类型\r\n    MP4Demuxer.prototype.start = function (onChunk) {\r\n        this.source.start(this.track, onChunk);\r\n    };\r\n    return MP4Demuxer;\r\n}());\r\nexport { MP4Demuxer };\r\nvar Writer = /** @class */ (function () {\r\n    function Writer(size) {\r\n        this.data = new Uint8Array(size);\r\n        this.idx = 0;\r\n        this.size = size;\r\n    }\r\n    Writer.prototype.getData = function () {\r\n        if (this.idx != this.size)\r\n            throw \"Mismatch between size reserved and sized used\";\r\n        return this.data.slice(0, this.idx);\r\n    };\r\n    Writer.prototype.writeUint8 = function (value) {\r\n        this.data.set([value], this.idx);\r\n        this.idx++;\r\n    };\r\n    Writer.prototype.writeUint16 = function (value) {\r\n        // TODO: find a more elegant solution to endianess.\r\n        var arr = new Uint16Array(1);\r\n        arr[0] = value;\r\n        var buffer = new Uint8Array(arr.buffer);\r\n        this.data.set([buffer[1], buffer[0]], this.idx);\r\n        this.idx += 2;\r\n    };\r\n    Writer.prototype.writeUint32 = function (value) {\r\n        var arr = new Uint32Array(1);\r\n        arr[0] = value;\r\n        var buffer = new Uint8Array(arr.buffer);\r\n        this.data.set([buffer[3], buffer[2], buffer[1], buffer[0]], this.idx);\r\n        this.idx += 4;\r\n    };\r\n    Writer.prototype.writeUint8Array = function (value) {\r\n        this.data.set(value, this.idx);\r\n        this.idx += value.length;\r\n    };\r\n    return Writer;\r\n}());\r\nexport { Writer };\r\n","references":["/home/wudi/desktop/code/ts/vue3/vite-ts-test/web/node_modules/.pnpm/mp4box@0.5.2/node_modules/mp4box/dist/mp4box.all.js"]}
