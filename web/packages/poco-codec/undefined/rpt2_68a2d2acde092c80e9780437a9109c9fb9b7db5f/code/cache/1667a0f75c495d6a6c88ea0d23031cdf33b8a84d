{"code":"// Adapted from https://github.com/muaz-khan/RecordRTC/blob/master/RecordRTC.js#L1906\r\n// Requires https://github.com/muaz-khan/RecordRTC/blob/master/libs/EBML.js\r\n// EBML.js copyright goes to: https://github.com/legokichi/ts-ebml\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { EBML } from './external-js/EBML.js';\r\nvar WebMWriter = /** @class */ (function () {\r\n    //这里给了options一个any属性\r\n    function WebMWriter(options) {\r\n        this.options = __assign({ \r\n            // Metadata length without cues is about 281 bytes, we'll leave more\r\n            metadata_reserve_size: 1024 }, options);\r\n    }\r\n    WebMWriter.prototype.start = function (suggestedName) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        if (!suggestedName) return [3 /*break*/, 4];\r\n                        _a = this;\r\n                        return [4 /*yield*/, window.showSaveFilePicker({\r\n                                suggestedName: suggestedName,\r\n                                types: [{\r\n                                        description: 'WebM files',\r\n                                        accept: {\r\n                                            'video/webm': '.webm'\r\n                                        }\r\n                                    }]\r\n                            })];\r\n                    case 1:\r\n                        _a.handle = _c.sent();\r\n                        this.name = this.handle.name;\r\n                        _b = this;\r\n                        return [4 /*yield*/, this.handle.createWritable()];\r\n                    case 2:\r\n                        _b.writable = _c.sent();\r\n                        return [4 /*yield*/, this.writable.write(new ArrayBuffer(this.options.metadata_reserve_size))];\r\n                    case 3:\r\n                        _c.sent();\r\n                        this.size = this.options.metadata_reserve_size;\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        this.chunks = [];\r\n                        this.size = 0;\r\n                        _c.label = 5;\r\n                    case 5:\r\n                        this.reader = new EBML.Reader();\r\n                        this.decoder = new EBML.Decoder();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    //这里给了data any属性\r\n    WebMWriter.prototype.write = function (data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _i, _a, elm;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.decoder.readChunk(data);\r\n                        for (_i = 0, _a = this.decoder._result; _i < _a.length; _i++) {\r\n                            elm = _a[_i];\r\n                            this.reader.read(elm);\r\n                        }\r\n                        this.decoder._result = [];\r\n                        if (!this.writable) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.writable.write(data)];\r\n                    case 1:\r\n                        _b.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        this.chunks.push(data);\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        this.size += data.byteLength;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    WebMWriter.prototype.finish = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var refinedMetadataBuf_1, to_skip, space, has_space, write_metadata, refinedMetadataBuf, cues;\r\n            var _a;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.reader.stop();\r\n                        this.duration = this.reader.duration;\r\n                        if (!this.writable) {\r\n                            refinedMetadataBuf_1 = EBML.tools.makeMetadataSeekable(this.reader.metadatas, this.reader.duration, this.reader.cues);\r\n                            to_skip = this.reader.metadataSize;\r\n                            while (to_skip >= this.chunks[0].byteLength) {\r\n                                to_skip -= this.chunks[0].byteLength;\r\n                                this.chunks.shift();\r\n                            }\r\n                            if (to_skip > 0) {\r\n                                this.chunks[0] = Uint8Array.from(this.chunks[0]).subarray(to_skip);\r\n                            }\r\n                            this.size -= this.reader.metadataSize;\r\n                            this.chunks.unshift(refinedMetadataBuf_1);\r\n                            this.size += refinedMetadataBuf_1.byteLength;\r\n                            return [2 /*return*/, this.chunks];\r\n                        }\r\n                        space = this.options.metadata_reserve_size + this.reader.metadataSize;\r\n                        has_space = function () {\r\n                            return refinedMetadataBuf.byteLength === space ||\r\n                                refinedMetadataBuf.byteLength <= space - 2; // min Void size is 2\r\n                        };\r\n                        write_metadata = function () { return __awaiter(_this, void 0, void 0, function () {\r\n                            var void_size, buf, view;\r\n                            return __generator(this, function (_a) {\r\n                                switch (_a.label) {\r\n                                    case 0: return [4 /*yield*/, this.writable.seek(0)];\r\n                                    case 1:\r\n                                        _a.sent();\r\n                                        return [4 /*yield*/, this.writable.write(refinedMetadataBuf)];\r\n                                    case 2:\r\n                                        _a.sent();\r\n                                        void_size = space - refinedMetadataBuf.byteLength;\r\n                                        if (!(void_size >= 2)) return [3 /*break*/, 7];\r\n                                        return [4 /*yield*/, this.writable.write(new EBML.Encoder().getSchemaInfo('Void'))];\r\n                                    case 3:\r\n                                        _a.sent();\r\n                                        void_size -= 2; // one for element ID (above), one for VINT_WIDTH\r\n                                        if (!(void_size < 4)) return [3 /*break*/, 5];\r\n                                        return [4 /*yield*/, this.writable.write(Uint8Array.from([void_size & 0x80]))];\r\n                                    case 4:\r\n                                        _a.sent();\r\n                                        return [3 /*break*/, 7];\r\n                                    case 5:\r\n                                        buf = new ArrayBuffer(5);\r\n                                        view = new DataView(buf);\r\n                                        view.setUint8(0, 8);\r\n                                        view.setUint32(1, void_size - 4);\r\n                                        return [4 /*yield*/, this.writable.write(buf)];\r\n                                    case 6:\r\n                                        _a.sent();\r\n                                        _a.label = 7;\r\n                                    case 7: return [4 /*yield*/, this.writable.close()];\r\n                                    case 8:\r\n                                        _a.sent();\r\n                                        return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); };\r\n                        refinedMetadataBuf = EBML.tools.makeMetadataSeekable(this.reader.metadatas, this.reader.duration, this.reader.cues, this.options.metadata_reserve_size);\r\n                        if (!has_space()) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, write_metadata()];\r\n                    case 1:\r\n                        _b.sent();\r\n                        return [2 /*return*/, true];\r\n                    case 2:\r\n                        (_a = EBML.tools.makeMetadataSeekable(this.reader.metadatas, this.reader.duration, this.reader.cues, this.options.metadata_reserve_size, this.size), refinedMetadataBuf = _a[0], cues = _a[1]);\r\n                        if (!has_space()) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, this.writable.write(cues)];\r\n                    case 3:\r\n                        _b.sent();\r\n                        this.size += cues.byteLength;\r\n                        return [4 /*yield*/, write_metadata()];\r\n                    case 4:\r\n                        _b.sent();\r\n                        return [2 /*return*/, false];\r\n                    case 5: throw new Error('no space for metadata');\r\n                }\r\n            });\r\n        });\r\n    };\r\n    WebMWriter.prototype.cancel = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.writable) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.writable.abort()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return WebMWriter;\r\n}());\r\nexport { WebMWriter };\r\n","references":["/home/wudi/desktop/code/ts/vue3/vite-ts-test/web/packages/poco-codec/src/codec/external-js/EBML.js"]}
