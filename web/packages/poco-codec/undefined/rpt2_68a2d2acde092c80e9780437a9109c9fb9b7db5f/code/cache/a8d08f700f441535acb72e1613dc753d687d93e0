{"code":"import { __assign, __awaiter, __generator } from \"tslib\";\r\n// From https://github.com/webrtcHacks/WebRTC-Camera-Resolution/blob/master/js/resolutionScan.js\r\nvar resolutions = [{\r\n        label: '4K (UHD)',\r\n        width: 3840,\r\n        height: 2160,\r\n        ratio: 16 / 9\r\n    }, {\r\n        label: '1080p (FHD)',\r\n        width: 1920,\r\n        height: 1080,\r\n        ratio: 16 / 9\r\n    }, {\r\n        label: 'UXGA',\r\n        width: 1600,\r\n        height: 1200,\r\n        ratio: 4 / 3\r\n    }, {\r\n        label: '720p (HD)',\r\n        width: 1280,\r\n        height: 720,\r\n        ratio: 16 / 9\r\n    }, {\r\n        label: 'SVGA',\r\n        width: 800,\r\n        height: 600,\r\n        ratio: 4 / 3\r\n    }, {\r\n        label: 'VGA',\r\n        width: 640,\r\n        height: 480,\r\n        ratio: 4 / 3\r\n    }, {\r\n        label: '360p (nHD)',\r\n        width: 640,\r\n        height: 360,\r\n        ratio: 16 / 9\r\n    }, {\r\n        label: 'CIF',\r\n        width: 352,\r\n        height: 288,\r\n        ratio: 4 / 3\r\n    }, {\r\n        label: 'QVGA',\r\n        width: 320,\r\n        height: 240,\r\n        ratio: 4 / 3\r\n    }, {\r\n        label: 'QCIF',\r\n        width: 176,\r\n        height: 144,\r\n        ratio: 4 / 3\r\n    }, {\r\n        label: 'QQVGA',\r\n        width: 160,\r\n        height: 120,\r\n        ratio: 4 / 3\r\n    }\r\n];\r\nvar len = resolutions.length;\r\nfor (var i = 0; i < len; ++i) {\r\n    var res = resolutions[i];\r\n    resolutions.push({\r\n        label: \"\".concat(res.label, \" (portrait)\"),\r\n        width: res.height,\r\n        height: res.width,\r\n        ratio: 1 / res.ratio\r\n    });\r\n}\r\n//这里给了constraints any属性\r\nexport function max_video_config(constraints, all_if_no_webcodecs) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _i, resolutions_1, res, support;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    constraints = constraints || {};\r\n                    _i = 0, resolutions_1 = resolutions;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(_i < resolutions_1.length)) return [3 /*break*/, 5];\r\n                    res = resolutions_1[_i];\r\n                    if (!((!constraints.ratio || (res.ratio === constraints.ratio)) &&\r\n                        (!constraints.width || (res.width <= constraints.width)) &&\r\n                        (!constraints.height || (res.height <= constraints.height)))) return [3 /*break*/, 4];\r\n                    if (!('VideoEncoder' in window)) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, VideoEncoder.isConfigSupported(__assign(__assign({}, constraints), res))];\r\n                case 2:\r\n                    support = _a.sent();\r\n                    if (support.supported) {\r\n                        return [2 /*return*/, __assign(__assign({}, res), support.config)];\r\n                    }\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    if (all_if_no_webcodecs) {\r\n                        return [2 /*return*/, res];\r\n                    }\r\n                    _a.label = 4;\r\n                case 4:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 5: return [2 /*return*/, null];\r\n            }\r\n        });\r\n    });\r\n}\r\n","references":[]}
